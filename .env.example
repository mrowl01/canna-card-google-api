# ====================================
# Google Wallet Loyalty Card POC
# Environment Configuration Template
# ====================================

# =====================================
# GOOGLE WALLET CONFIGURATION
# =====================================

# Your Google Wallet Issuer ID (from Google Wallet Console)
# Example: 3388000000012345678
ISSUER_ID=your_issuer_id_here

# Unique suffix for your loyalty class
# This helps identify different loyalty programs if you have multiple
CLASS_SUFFIX=loyalty_class_v1

# Unique suffix for loyalty objects
OBJECT_SUFFIX=loyalty_object

# =====================================
# GOOGLE CLOUD AUTHENTICATION
# =====================================

# Path to your Google Cloud service account JSON key file
# Download from: Google Cloud Console > IAM & Admin > Service Accounts
# This service account must have Google Wallet API permissions
GOOGLE_APPLICATION_CREDENTIALS=./service-account-key.json

# =====================================
# PROGRAM BRANDING
# =====================================

# Your loyalty program name (displayed on cards)
PROGRAM_NAME=Teiga Tech Rewards

# URL to your program logo (must be HTTPS and publicly accessible)
# Recommended size: 660x660px, PNG or JPG
PROGRAM_LOGO_URL=https://your-domain.com/logo.png

# Hex color code for primary brand color
BRAND_COLOR=#1976D2

# Hex color code for background color
BACKGROUND_COLOR=#FFFFFF

# =====================================
# SERVER CONFIGURATION
# =====================================

# Port for the server to listen on
PORT=3001

# Node environment (development, production, test)
NODE_ENV=development

# =====================================
# SECURITY
# =====================================

# Secret key for JWT signing (REQUIRED)
# Generate a strong random key with: openssl rand -base64 32
# IMPORTANT: Keep this secret and never commit it to version control
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# API Keys for authentication (REQUIRED in production)
# Generate with: openssl rand -hex 32
# Comma-separated for multiple keys
# Example: frontend_key_abc123,mobile_app_key_xyz789,admin_key_def456
API_KEYS=your-api-key-here

# Allowed origins for Google Wallet JWT (comma-separated)
# These URLs will be able to add cards to Google Wallet
# Include all your frontend URLs
ORIGINS=http://localhost:3001,https://your-frontend.vercel.app

# =====================================
# LOGGING
# =====================================

# Log level: debug, info, warn, error
LOG_LEVEL=info

# Directory for log files
LOG_DIR=./logs

# Maximum log file size (in bytes)
LOG_MAX_SIZE=10485760

# Maximum number of log files to keep
LOG_MAX_FILES=10

# =====================================
# RATE LIMITING
# =====================================

# Maximum notifications per user per day (Google Wallet limit is 3)
MAX_NOTIFICATIONS_PER_DAY=3

# Rate limit window in milliseconds (24 hours)
RATE_LIMIT_WINDOW_MS=86400000

# =====================================
# SUPABASE CONFIGURATION
# =====================================

# Supabase project URL
SUPABASE_URL=https://your-project.supabase.co

# Supabase anon/public key (for client-side if needed)
SUPABASE_ANON_KEY=your_supabase_anon_key

# Supabase service role key (for server-side operations)
# IMPORTANT: Keep this secret, has admin access to bypass RLS
SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key

# =====================================
# OPTIONAL: TASK MASTER AI
# =====================================

# Anthropic API key for Task Master AI (optional)
# Only needed if using task-master-ai for project management
# ANTHROPIC_API_KEY=your_anthropic_api_key

# =====================================
# NOTES
# =====================================

# 1. Copy this file to .env and fill in your actual values
# 2. Never commit .env to version control (it's in .gitignore)
# 3. Generate strong secrets for production
# 4. Use environment-specific .env files (.env.production, .env.development)
# 5. Review Google Wallet Console for your ISSUER_ID
# 6. Ensure service account has proper permissions in Google Cloud
